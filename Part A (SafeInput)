import java.util.Scanner;

public class SafeInput { // <-- CLASS START

    // Part A: getNonZeroLenString
    public static String getNonZeroLenString(Scanner pipe, String prompt) {
        String retString = "";
        do {
            System.out.print("\n" + prompt + ": ");
            retString = pipe.nextLine();
        } while (retString.length() == 0);
        return retString;
    } // <-- Method A end

    // Part B: getInt
    public static int getInt(Scanner pipe, String prompt) {
        int retInt = 0;
        String trash = "";
        boolean done = false;

        do {
            System.out.print("\n" + prompt + ": ");
            if (pipe.hasNextInt()) {
                retInt = pipe.nextInt();
                pipe.nextLine();
                done = true;
            } else {
                trash = pipe.nextLine();
                System.out.println("Invalid input. You entered: " + trash);
                System.out.println("Please enter a valid integer.");
            }
        } while (!done);

        return retInt;
    } // <-- Method B end

    // Part C: getDouble
    public static double getDouble(Scanner pipe, String prompt) {
        double retDouble = 0.0;
        String trash = "";
        boolean done = false;

        do {
            System.out.print("\n" + prompt + ": ");
            if (pipe.hasNextDouble()) {
                retDouble = pipe.nextDouble();
                pipe.nextLine();
                done = true;
            } else {
                trash = pipe.nextLine();
                System.out.println("Invalid input. You entered: " + trash);
                System.out.println("Please enter a valid double value.");
            }
        } while (!done);

        return retDouble;
    } // <-- Method C end

    // Part D: getRangedInt
    public static int getRangedInt(Scanner pipe, String prompt, int low, int high) {
        int retInt = 0;
        String trash = "";
        boolean done = false;

        do {
            String fullPrompt = prompt + " [" + low + " - " + high + "]";
            System.out.print("\n" + fullPrompt + ": ");

            if (pipe.hasNextInt()) {
                retInt = pipe.nextInt();
                pipe.nextLine();

                if (retInt >= low && retInt <= high) {
                    done = true;
                } else {
                    System.out.println("Invalid range. You must enter a value between " + low + " and " + high + ".");
                }
            } else {
                trash = pipe.nextLine();
                System.out.println("Invalid input. You entered: " + trash);
                System.out.println("Please enter a valid integer.");
            }
        } while (!done);

        return retInt;
    } // <-- Method D end

    // Part E: getRangedDouble
    public static double getRangedDouble(Scanner pipe, String prompt, double low, double high) {
        double retDouble = 0.0;
        String trash = "";
        boolean done = false;

        do {
            String fullPrompt = prompt + " [" + low + " - " + high + "]";
            System.out.print("\n" + fullPrompt + ": ");

            if (pipe.hasNextDouble()) {
                retDouble = pipe.nextDouble();
                pipe.nextLine();

                if (retDouble >= low && retDouble <= high) {
                    done = true;
                } else {
                    System.out.println("Invalid range. You must enter a value between " + low + " and " + high + ".");
                }
            } else {
                trash = pipe.nextLine();
                System.out.println("Invalid input. You entered: " + trash);
                System.out.println("Please enter a valid double value.");
            }
        } while (!done);

        return retDouble;
    } // <-- Method E end

    // Part F: getYNConfirm
    public static boolean getYNConfirm(Scanner pipe, String prompt) {
        String input = "";
        boolean done = false;
        boolean retVal = false;

        do {
            System.out.print("\n" + prompt + " [Y/N]: ");
            input = pipe.nextLine();

            if (input.equalsIgnoreCase("Y")) {
                retVal = true;
                done = true;
            } else if (input.equalsIgnoreCase("N")) {
                retVal = false;
                done = true;
            } else {
                System.out.println("Invalid input. Please enter 'Y' or 'N'.");
            }
        } while (!done);

        return retVal;
    } // <-- Method F end

    // Part G: getRegExString
    public static String getRegExString(Scanner pipe, String prompt, String regEx) {
        String retString = "";
        boolean done = false;

        do {
            System.out.print("\n" + prompt + " (" + regEx + "): ");
            retString = pipe.nextLine();

            if (retString.matches(regEx)) {
                done = true;
            } else {
                System.out.println("Invalid input. The input must match the pattern: " + regEx);
            }
        } while (!done);

        return retString;
    } // <-- Method G end

    // Part H: prettyHeader (No Scanner required)
    public static void prettyHeader(String msg) {
        int width = 60;
        int msgLen = msg.length();
        int starBorder = 3;

        // 1. Top row
        for (int i = 0; i < width; i++) {
            System.out.print("*");
        }
        System.out.println();

        // 2. Middle row
        int availableSpace = width - (starBorder * 2) - msgLen;
        int spaceBefore = availableSpace / 2;
        int spaceAfter = availableSpace - spaceBefore;

        System.out.print("***"); // Left border

        // Spaces before
        for (int i = 0; i < spaceBefore; i++) {
            System.out.print(" ");
        }

        System.out.print(msg); // Message

        // Spaces after
        for (int i = 0; i < spaceAfter; i++) {
            System.out.print(" ");
        }

        System.out.println("***"); // Right border

        // 3. Bottom row
        for (int i = 0; i < width; i++) {
            System.out.print("*");
        }
        System.out.println();
    } // <-- Method H end
} // <-- CLASS END: This final brace resolves the "reached end of file" error
